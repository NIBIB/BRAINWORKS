{"version":3,"file":"static/js/510.6069409a.chunk.js","mappings":"0QA0LA,UAzJkB,WAChB,IAAMA,GAASC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MACTC,GAAmBC,EAAAA,EAAAA,KAAnBD,eACR,GAAoCE,EAAAA,EAAAA,MAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAKxB,IAHAC,EAAAA,EAAAA,GAAa,oBAGRV,EAAOW,UAAwCC,IAAjCC,EAAAA,EAAiBb,EAAOW,KACzC,OAAO,SAAC,KAAD,CAAUG,GAAG,cAItB,IAAMC,EAAWF,EAAAA,EAAiBb,EAAOW,KAkBzC,OACE,iCACE,SAAC,IAAD,CACEK,eAAgBhB,EAAOW,IACvBH,OAAQA,EACRC,QAASA,KAEX,SAAC,IAAD,CACEQ,QAASF,EAASE,QAClBC,eAxBe,SAACC,EAAWC,GAM/BhB,EAAe,CACbe,KAAMA,EACNE,UAAW,WALXnB,EAAS,mBAOR,EACDoB,WAAYH,EAAKI,OAEpB,EAYKC,YAAY,EACZC,aAAa,EAJf,SAMG,gBAAGC,EAAH,EAAGA,aAAH,OACC,UAAC,KAAD,CAAWC,KAAK,MAAMC,GAAI,IAA1B,WAEE,SAAC,IAAD,CACEC,SAAS,YACTC,MAAM,qBACNC,KAAK,iEACLC,WAAY,CAAEC,GAAI,QAGpB,UAAC,KAAD,CACEC,GAAG,QACHC,EAAG,GACHC,aAAa,KACbC,UAAU,KACVC,OAAO,MACPC,YAAY,WANd,WAQE,UAAC,KAAD,CAAQC,EAAE,OAAOC,QAAQ,gBAAgBC,GAAI,GAA7C,WACE,UAAC,KAAD,CAAQC,QAAS,EAAjB,WACE,SAAC,KAAD,CAASC,KAAK,KAAd,SAAoB7B,EAASe,SAC7B,SAAC,IAAD,CACEe,MAAM,QACNC,UAAQ,EACRC,MAAK,0CAAqChC,EAASe,OACnD,aAAW,2EAJb,UAME,SAAC,KAAD,CACEkB,QAAQ,QACRJ,KAAK,KACLC,MAAM,WACN,2BAAmB9B,EAASe,MAA5B,gBACAmB,MAAM,SAAC,MAAD,IACNC,QAAS3C,UAKf,UAAC,KAAD,YACE,SAAC,KAAD,CACEyC,QAAQ,UACRJ,KAAK,KACLM,QAAS,WACPhD,EAAS,eACV,EALH,qBASA,SAAC,KAAD,CACE0C,KAAK,KACLO,KAAK,SACLC,YAAY,OACZC,WAAY3B,EAJd,2BAUJ,UAAC,KAAD,CAAQc,EAAE,OAAOG,QAAS,EAA1B,UAEG5B,EAASuC,SAASC,KAAI,SAACC,EAAYC,GAAb,OACrB,SAAC,IAAD,CAAYC,SAAUF,EAAME,UAAeF,EAAME,SAD5B,IAItB3C,EAAS4C,SAASC,OAAS,IAC1B,SAAC,KAAD,CAAWC,aAAW,EAACrB,EAAE,OAAzB,UACE,UAAC,KAAD,YACE,yBACE,UAAC,KAAD,CAAiBK,MAAM,WAAvB,WACE,UAAC,KAAD,CAAKiB,KAAK,IAAIC,UAAU,OAAxB,sBACY,KACV,SAAC,KAAD,CACEC,GAAI,EACJC,GAAG,KACHC,QAAQ,SACRC,UAAU,UACVC,SAAS,KALX,0BAUF,SAAC,KAAD,UAGJ,SAAC,KAAD,CAAgB1B,GAAI,EAAG2B,KAAK,QAA5B,UACE,SAAC,KAAD,CAAQ7B,EAAE,OAAOG,QAAS,EAA1B,SACG5B,EAAS4C,SAASJ,KACjB,SAACC,EAAYC,GAAb,OACE,SAAC,IAAD,CACEC,SAAUF,EAAME,UACXF,EAAME,SAHf,qBAvFnB,MA0GR,C","sources":["pages/visualizer-pages/VisualizerForms/index.tsx"],"sourcesContent":["import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Button,\n  Container,\n  Heading,\n  HStack,\n  IconButton,\n  Text,\n  Tooltip,\n  useDisclosure,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { Navigate, useNavigate, useParams } from \"react-router-dom\";\nimport { FiInfo } from \"react-icons/fi\";\n\nimport FlaskForm from \"../../../common/components/FlaskForm\";\nimport usePageTitle from \"../../../common/hooks/usePageTitle\";\nimport useAPIDataAlert from \"../../../common/hooks/useAPIDataAlert\";\nimport PageHeader from \"../../../common/components/PageHeader\";\nimport VisualizerInfoModal from \"../components/VisualizerInfoModal\";\nimport FlaskField from \"common/components/FlaskField\";\nimport { VISUALIZER_FORMS } from \"../templates\";\n\n/**\n * ToolForms\n *\n * Generates specific tool form based on given form key from URL, `form/:formkey`\n */\nconst ToolForms = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n  const { apiDataAlerter } = useAPIDataAlert();\n  const { onOpen, isOpen, onClose } = useDisclosure();\n\n  usePageTitle(`Visualizer form`);\n\n  // * If cannot find tool in given URL, navigate back to the start\n  if (!params.key || VISUALIZER_FORMS[params.key] === undefined) {\n    return <Navigate to=\"/error404\" />;\n  }\n\n  // * Constant to get all information from `VISUALIZER_FORMS` dictionary given form key\n  const toolForm = VISUALIZER_FORMS[params.key];\n\n  // * Handles on form submit\n  const handleSubmit = (data: any, values: any) => {\n    // * Successfully has all required forms filled in, send to tool page to build query\n    const submitSuccess = () => {\n      navigate(\"/visualizers/app\");\n    };\n    // * Otherwise, alert success or give errors\n    apiDataAlerter({\n      data: data,\n      onSuccess: () => {\n        submitSuccess();\n      },\n      failureMsg: data.error,\n    });\n  };\n\n  return (\n    <>\n      <VisualizerInfoModal\n        representation={params.key}\n        isOpen={isOpen}\n        onClose={onClose}\n      />\n      <FlaskForm\n        formKey={toolForm.formKey}\n        runAfterSubmit={handleSubmit}\n        noValidate={true}\n        formSession={true}\n      >\n        {({ isSubmitting }) => (\n          <Container maxW=\"4xl\" my={100}>\n            {/* Top heading */}\n            <PageHeader\n              subTitle=\"Customize\"\n              title=\"Design your visual\"\n              desc=\"Use over 40 years of scientific data to customize your visual.\"\n              stackProps={{ mb: 100 }}\n            />\n            {/* Form card */}\n            <Box\n              bg=\"white\"\n              p={50}\n              borderRadius=\"lg\"\n              boxShadow=\"sm\"\n              border=\"1px\"\n              borderColor=\"gray.200\"\n            >\n              <HStack w=\"100%\" justify=\"space-between\" pb={50}>\n                <HStack spacing={1}>\n                  <Heading size=\"md\">{toolForm.title}</Heading>\n                  <Tooltip\n                    color=\"white\"\n                    hasArrow\n                    label={`Click to view information about ${toolForm.title}`}\n                    aria-label=\"Tooltip to inform user that clicking this will open for more information\"\n                  >\n                    <IconButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      color=\"gray.500\"\n                      aria-label={`See ${toolForm.title} information`}\n                      icon={<FiInfo />}\n                      onClick={onOpen}\n                    />\n                  </Tooltip>\n                </HStack>\n                {/* Submit */}\n                <HStack>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      navigate(\"/visualizers\");\n                    }}\n                  >\n                    Return\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    type=\"submit\"\n                    colorScheme=\"blue\"\n                    isDisabled={isSubmitting}\n                  >\n                    Submit\n                  </Button>\n                </HStack>\n              </HStack>\n              <VStack w=\"100%\" spacing={5}>\n                {/* Required fields */}\n                {toolForm.required.map((field: any, index: number) => (\n                  <FlaskField property={field.property} key={field.property} />\n                ))}\n                {/* Option fields if any exist */}\n                {toolForm.optional.length > 0 && (\n                  <Accordion allowToggle w=\"100%\">\n                    <AccordionItem>\n                      <h2>\n                        <AccordionButton color=\"gray.600\">\n                          <Box flex=\"1\" textAlign=\"left\">\n                            Advanced {\" \"}\n                            <Text\n                              ml={2}\n                              as=\"em\"\n                              display=\"inline\"\n                              fontStyle=\"italics\"\n                              fontSize=\"xs\"\n                            >\n                              Optional\n                            </Text>\n                          </Box>\n                          <AccordionIcon />\n                        </AccordionButton>\n                      </h2>\n                      <AccordionPanel pb={4} minH=\"500px\">\n                        <VStack w=\"100%\" spacing={5}>\n                          {toolForm.optional.map(\n                            (field: any, index: number) => (\n                              <FlaskField\n                                property={field.property}\n                                key={field.property}\n                              />\n                            )\n                          )}\n                        </VStack>\n                      </AccordionPanel>\n                    </AccordionItem>\n                  </Accordion>\n                )}\n              </VStack>\n            </Box>\n          </Container>\n        )}\n      </FlaskForm>\n    </>\n  );\n};\n\nexport default ToolForms;\n"],"names":["params","useParams","navigate","useNavigate","apiDataAlerter","useAPIDataAlert","useDisclosure","onOpen","isOpen","onClose","usePageTitle","key","undefined","VISUALIZER_FORMS","to","toolForm","representation","formKey","runAfterSubmit","data","values","onSuccess","failureMsg","error","noValidate","formSession","isSubmitting","maxW","my","subTitle","title","desc","stackProps","mb","bg","p","borderRadius","boxShadow","border","borderColor","w","justify","pb","spacing","size","color","hasArrow","label","variant","icon","onClick","type","colorScheme","isDisabled","required","map","field","index","property","optional","length","allowToggle","flex","textAlign","ml","as","display","fontStyle","fontSize","minH"],"sourceRoot":""}