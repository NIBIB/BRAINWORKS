{"version":3,"file":"static/js/482.95ce18fa.chunk.js","mappings":"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","sources":["common/components/FlaskForm/GeneratedForm.tsx","common/components/FlaskForm/InvalidToken.tsx","common/components/FlaskForm/FormikWrapper.tsx","common/components/FlaskForm/index.tsx","common/components/RouterLink/index.tsx","common/hooks/useAPIDataAlert.tsx","common/hooks/useGlobalAlert.tsx","common/hooks/useGlobalFormik.tsx","common/utils.ts","pages/auth-pages/UnlockAccountToken/index.tsx","pages/auth-pages/components/AuthCard/index.tsx","pages/auth-pages/components/AuthFooter/index.tsx","pages/auth-pages/components/AuthHeading/index.tsx"],"sourcesContent":["import { ReactNode } from \"react\";\n\ninterface AppProps {\n  /**\n   * `function` - runs when form is submitted\n   */\n  handleSubmit: any;\n  noValidate?: boolean;\n  children: ReactNode;\n}\n\n/**\n * GeneratedForm\n *\n * React component that wraps child in a form component and attaches a callback to the submit function\n */\nconst GeneratedForm = ({ children, noValidate, handleSubmit }: AppProps) => {\n  // * Disable default form behavior (enter = submit)\n  function onKeyDown(e: React.KeyboardEvent<HTMLFormElement>) {\n    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n      e.preventDefault();\n    }\n  }\n\n  return (\n    <form\n      onKeyDown={onKeyDown}\n      onSubmit={handleSubmit}\n      noValidate={noValidate !== undefined ? noValidate : false}\n    >\n      {children}\n    </form>\n  );\n};\n\nexport default GeneratedForm;\n","import { Flex, Heading, Text, VStack } from \"@chakra-ui/react\";\n\n/**\n * Invalid Token\n *\n * React component that displays when an invalid token is given\n */\nconst InvalidToken = () => {\n  return (\n    <Flex h=\"90vh\" align=\"center\" justify=\"center\">\n      <VStack maxW=\"xl\" textAlign=\"center\">\n        <Heading>Invalid link.</Heading>\n        <Text color=\"gray.500\">\n          Link may be expired or copied incorrectly. Please make sure you copied\n          the correct link from your email. If that doesn't work try requesting\n          another one.\n        </Text>\n      </VStack>\n    </Flex>\n  );\n};\n\nexport default InvalidToken;\n","import { FormikProvider, useFormik } from \"formik\";\nimport { ReactElement, useEffect } from \"react\";\nimport GeneratedForm from \"./GeneratedForm\";\nimport InvalidToken from \"./InvalidToken\";\nimport { AnimatePresence, motion } from \"framer-motion\";\ninterface AppProps {\n  postFormInput: any;\n  initialValue: any;\n  validationSchema: any;\n  noValidate: any;\n  submitHandler: any;\n  invalidToken: boolean;\n  formSession?: boolean;\n  isSubmitting: boolean;\n  children: (ctx: { isSubmitting: boolean }) => ReactElement;\n}\n\nconst FormikWrapper = ({\n  formSession,\n  postFormInput,\n  initialValue,\n  validationSchema,\n  noValidate,\n  submitHandler,\n  children,\n  invalidToken,\n  isSubmitting,\n}: AppProps) => {\n  // * Formik object given parameters from backend\n  const formik = useFormik({\n    initialValues: initialValue,\n    enableReinitialize: true,\n    validationSchema: validationSchema,\n    onSubmit: submitHandler,\n  });\n\n  // * Saves form in session every time value is updated\n  useEffect(() => {\n    let timer: ReturnType<typeof setTimeout>;\n    if (formSession && formik.values) {\n      timer = setTimeout(async () => {\n        await postFormInput({\n          save_session: true,\n          values: formik.values,\n        });\n      }, 500);\n    }\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formSession, formik.values]);\n\n  return (\n    <AnimatePresence>\n      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\n        <FormikProvider value={formik}>\n          {invalidToken ? (\n            // * Invalid token page\n            <InvalidToken />\n          ) : (\n            // * Generated form\n            <GeneratedForm\n              handleSubmit={formik.handleSubmit}\n              noValidate={noValidate}\n            >\n              {children({ isSubmitting })}\n            </GeneratedForm>\n          )}\n        </FormikProvider>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\nexport default FormikWrapper;\n","import * as Yup from \"yup\";\nimport { useParams } from \"react-router-dom\";\nimport { ReactElement, useEffect, useState } from \"react\";\nimport { buildYup } from \"schema-to-yup\";\n\nimport useFormikState from \"../../hooks/useGlobalFormik\";\nimport FormikWrapper from \"./FormikWrapper\";\nimport useAxiosWrapper from \"common/hooks/useAxiosWrapper\";\n// * Type for building form state\ninterface BuildFormType {\n  key: string;\n  validation_schema: any;\n  initial_values: any;\n  fields_info: any[];\n  loading: boolean;\n  hasToken: boolean;\n  hasCaptcha: boolean;\n  invalidToken: boolean;\n  csrf_token: string;\n  isSubmitting: boolean;\n}\n\ninterface AppProps {\n  /**\n   * `string` - Form key matches with the Flask form's form key in order to generate correct form object\n   */\n  formKey: string;\n\n  /**\n   * `object` - Field values in this object will reset to the inital state on form submit\n   */\n  resetAfterSubmit?: any;\n  /**\n   * `function` - This callback function will run after the form is successfully submitted, good for changing the state or navigating to another page after submission\n   */\n  runAfterSubmit?: (data: any, values: any) => void;\n  /**\n   * `boolean` - Determines if form should have vanilla valiation (incorrect input popups)\n   */\n  noValidate?: boolean;\n  /**\n   * `boolean` - Save form in session for user to come back to\n   */\n  formSession?: boolean;\n  /**\n   * Render props to return isSubmitting\n   */\n  children: (ctx: { isSubmitting: boolean }) => ReactElement;\n}\n\n/**\n * Flask Form\n *\n * React component that wraps a `Formik Form` and returns render props with generated Formik information. Takes in the associated `form key` into draws all form information from Flask backend to ensure the same validation.\n *\n * If form is a token form (email verification, reset password, etc), it will verify the key in the URL, then either display the needed page or an invalid token page.\n *\n * If the form is a token form with one field valid (only verifying token), the form will automatically submit the form on the component load\n *\n */\nconst FlaskForm = ({\n  formKey,\n  resetAfterSubmit,\n  runAfterSubmit,\n  noValidate,\n  formSession,\n  children,\n}: AppProps) => {\n  // * Get request to build form on component render\n  const [form, setForm] = useState<BuildFormType>({\n    key: \"\",\n    fields_info: [],\n    initial_values: {},\n    validation_schema: {},\n    loading: true,\n    hasToken: true,\n    invalidToken: false,\n    hasCaptcha: false,\n    csrf_token: \"\",\n    isSubmitting: false,\n  });\n\n  // * Builds form from particular form object given key\n  const { getAxios: getBuildForm } = useAxiosWrapper({\n    url: `build_form/${formKey}`,\n    method: \"GET\",\n  });\n\n  // * Create post request to give form input\n  const { postAxios: postFormInput } = useAxiosWrapper({\n    url: `build_form/${formKey}`,\n    method: \"POST\",\n  });\n\n  const params = useParams();\n  const { setFormik, setCaptcha, resetGlobalFormik } = useFormikState();\n\n  // * On component render, build formik form from backend parameters & validate token if given\n  useEffect(() => {\n    let timer: any;\n\n    const buildForm = async () => {\n      // * Reset Formik State\n      resetGlobalFormik();\n      setForm((prevState) => {\n        return {\n          ...prevState,\n          key: \"\",\n          loading: true,\n        };\n      });\n      const { data } = await getBuildForm();\n      //console.log(data);\n      // * Check for token, if token field exists then post token to check for it\n      // ? TODO add route matching for token fields only\n      if (\n        data.fields_info.filter((field: any) => field.property === \"token\")\n          .length > 0\n      ) {\n        const { data: tokenData } = await postFormInput({\n          validate_token: params.token,\n        });\n        if (tokenData.hasOwnProperty(\"error\")) {\n          setForm((prevState) => {\n            return { ...prevState, invalidToken: true };\n          });\n        } else {\n          // * If only 1 field, token field just auto submit the form to backend\n          if (data.fields_info.length === 1) {\n            // console.log(\"Only token field, just auto verify\");\n            const { data } = await postFormInput({\n              token: params.token,\n            });\n            if (runAfterSubmit) {\n              runAfterSubmit(data, {});\n            }\n          }\n        }\n        setForm((prevState) => {\n          return { ...prevState, hasToken: true };\n        });\n      }\n\n      // * Set CSRF token state, so future post requests will have token\n      setForm((prevState) => {\n        return {\n          ...prevState,\n          csrf_token: data.csrf_token,\n        };\n      });\n\n      // * Create Yup schema & set to inital validation schema state\n      const formSchema = buildYup(data.validation_schema, data.config);\n      setForm((prevState) => {\n        return {\n          ...prevState,\n          validation_schema: formSchema,\n        };\n      });\n\n      // * Build yup has some errors\n      data.fields_info\n        .filter((field: any) => field.property !== \"token\")\n        .forEach((field: any) => {\n          // * If ref value exists, edit to overwrite error msg\n          if (field.refValueFor.length > 0) {\n            const addMatch = Yup.object().shape({\n              confirm: Yup.string()\n                .oneOf(\n                  [Yup.ref(field.refValueFor), null],\n                  `Must match with ${field.refValueFor} field`\n                )\n                .required(\"Required\"),\n            });\n            const removed = formSchema.omit([\"confirm\"]);\n            const add = removed.concat(addMatch);\n            setForm((prevState) => {\n              return {\n                ...prevState,\n                validation_schema: add,\n              };\n            });\n          }\n          // * If array is required, let minimum length\n          if (field.required && field.component === \"stringArray\") {\n            let newShape: any = {};\n            newShape[field.property] = Yup.array()\n              .of(Yup.string())\n              .min(1, `${field.title} must have atleast 1 item`)\n              .required();\n            const addMatch = Yup.object().shape(newShape);\n            const removed = formSchema.omit([field.property]);\n            const add = removed.concat(addMatch);\n            setForm((prevState) => {\n              return {\n                ...prevState,\n                validation_schema: add,\n              };\n            });\n          }\n        });\n\n      // * Set CAPTCHA state, check if CAPTCHA exists first\n      const captcha = data.fields_info.filter(\n        (field: any) => field.property === \"math\"\n      );\n      if (captcha.length > 0) {\n        const field = captcha[0];\n        setCaptcha(field.img, field.audio);\n      }\n\n      setForm((prevState) => {\n        return {\n          ...prevState,\n          initial_values: data.initial_values,\n          fields_info: data.fields_info,\n          loading: false,\n          csrf_token: data.csrf_token,\n        };\n      });\n      setFormik({\n        key: formKey,\n        loading: false,\n        fieldsInfo: data.fields_info,\n      });\n    };\n    buildForm();\n    return () => {\n      // * Clear timer on component demount\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const submitTest = async (values: any, { resetForm }: any) => {\n    setForm((prevState) => {\n      return {\n        ...prevState,\n        isSubmitting: true,\n      };\n    });\n\n    // * Reset certain form values if needed\n    if (resetAfterSubmit) {\n      resetForm({ values: { ...values, ...resetAfterSubmit } });\n    }\n    // * If token exists, send token along with usual form\n    let sentData = { ...values };\n    if (form.hasToken) {\n      sentData = { ...values, token: params.token };\n    }\n    const { data } = await postFormInput({\n      ...sentData,\n    });\n\n    if (runAfterSubmit) {\n      runAfterSubmit(data, values);\n    }\n    setForm((prevState) => {\n      return {\n        ...prevState,\n        isSubmitting: false,\n      };\n    });\n  };\n\n  // * Loads either an invalid token page or the generated form\n  return (\n    <>\n      {!form.loading && (\n        <FormikWrapper\n          postFormInput={postFormInput}\n          formSession={formSession}\n          initialValue={form.initial_values}\n          validationSchema={form.validation_schema}\n          noValidate={noValidate}\n          submitHandler={submitTest}\n          children={children}\n          isSubmitting={form.isSubmitting}\n          invalidToken={form.invalidToken}\n        />\n      )}\n    </>\n  );\n};\n\nexport default FlaskForm;\n","import { Link, LinkProps } from \"@chakra-ui/react\";\nimport { Link as ReactRouterLink } from \"react-router-dom\";\n\ninterface AppProps {\n  text: string;\n  link: string;\n  linkProps?: LinkProps;\n}\nconst RouterLink = ({ text, link, linkProps }: AppProps) => {\n  return (\n    <Link color=\"blue.600\" as={ReactRouterLink} to={link} {...linkProps}>\n      {text}\n    </Link>\n  );\n};\n\nexport default RouterLink;\n","import { containsError, containsSuccess } from \"../utils\";\nimport useGlobalFormik from \"./useGlobalFormik\";\nimport useGlobalAlert from \"./useGlobalAlert\";\n\ninterface PostWrapperFunctionProps {\n  data: any;\n  onSuccess?: () => void;\n  successMsg?: string;\n  onFailure?: () => void;\n  failureMsg?: string;\n}\n\n/**\n * React hook that helps reduce redundant code when posting with `useAxios` to the BRAINWORKS API. It ultizes `useGlobalAlert` and and try and catch statements to help error check\n *\n * If JSON returns `success` or `error` it prints that message, otherwise it prints out success/error message from the API\n *\n * If request fails, then it prints out generic error message\n */\nconst useAPIDataAlert = (): {\n  /**\n   * Function that reduces redunancy of interpretting a JSON from the BRAINWORKS API\n   */\n  apiDataAlerter: ({\n    onSuccess,\n    successMsg,\n    onFailure,\n    failureMsg,\n    data,\n  }: PostWrapperFunctionProps) => Promise<void>;\n  /**\n   * Function that returns a standard error message\n   */\n  standardAlertError: () => void;\n  /**\n   * Function that puts a try catch statement around the given function, if there are errors it throws the standard alert error\n   */\n  tryCatchWrapper: (func: any) => void;\n} => {\n  const { showGlobalAlert } = useGlobalAlert();\n  const { formikSlice, newCaptcha } = useGlobalFormik();\n\n  const standardAlertError = () => {\n    showGlobalAlert(\"Something went wrong!\", \"Please try again later\");\n  };\n\n  const tryCatchWrapper = (func: any) => {\n    try {\n      func();\n    } catch {\n      standardAlertError();\n    }\n  };\n\n  const apiDataAlerter = async ({\n    onSuccess,\n    successMsg,\n    onFailure,\n    failureMsg,\n    data,\n  }: PostWrapperFunctionProps) => {\n    if (containsSuccess(data)) {\n      // * If object contains \"success\", alert either custom success message or one from back end\n      if (successMsg) {\n        showGlobalAlert(\"Success!\", successMsg, \"success\");\n      } else {\n        if (typeof data.success === \"string\") {\n          showGlobalAlert(\"Success!\", data.success, \"success\");\n        }\n      }\n      // * Run success function, if one is defined\n      if (onSuccess) {\n        onSuccess();\n      }\n    } else {\n      // * If object contains \"error\", alert either custom failure message or one from back end\n      if (containsError(data)) {\n        if (failureMsg) {\n          showGlobalAlert(\"Something went wrong!\", failureMsg, \"error\");\n        } else {\n          showGlobalAlert(\"Something went wrong!\", data.error);\n        }\n        // * If form has CAPTCHA, checking if image is set, if so set a new captcha\n        if (formikSlice.captcha.img.length > 0) {\n          newCaptcha();\n        }\n      }\n      // * Run failure function, if one is define\n      if (onFailure) {\n        onFailure();\n      }\n    }\n  };\n\n  return { apiDataAlerter, standardAlertError, tryCatchWrapper };\n};\n\nexport default useAPIDataAlert;\n","import { useToast } from \"@chakra-ui/react\";\nimport { hideAlert, showAlert } from \"../../store/features/alertSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../store/hooks\";\nimport { AlertType, ShowAlertType } from \"../../store/models\";\n\n/**\n * @returns state to hide or show global alert system\n */\n\ntype ShowGlobalAlertType = (\n  title: string,\n  desc: string,\n  status?: \"error\" | \"info\" | \"warning\" | \"success\" | \"loading\" | undefined,\n  duration?: number | null\n) => void;\n\n// TODO: clean this up like the status\nconst useGlobalAlert = (): {\n  globalAlert: AlertType;\n  showGlobalAlert: ShowGlobalAlertType;\n  hideGlobalAlert: () => void;\n} => {\n  const globalAlert = useAppSelector((state) => state.alert);\n  const dispatch = useAppDispatch();\n  const toast = useToast();\n\n  const showGlobalAlert: ShowGlobalAlertType = (\n    title,\n    desc,\n    status,\n    duration\n  ) => {\n    const alert: ShowAlertType = {\n      title: title,\n      desc: desc,\n      status: status ? status : \"error\",\n    };\n    dispatch(showAlert(alert));\n    toast({\n      position: \"top\",\n      title: title,\n      description: desc,\n      status: status !== undefined ? status : \"error\",\n      duration: duration !== undefined ? duration : 5000,\n      isClosable: true,\n    });\n  };\n\n  const hideGlobalAlert = () => {\n    dispatch(hideAlert());\n  };\n\n  return { globalAlert, showGlobalAlert, hideGlobalAlert };\n};\n\nexport default useGlobalAlert;\n","import useAxios from \"axios-hooks\";\n\nimport {\n  resetFormikSlice,\n  setFormikSlice,\n  setNewCaptcha,\n} from \"../../store/features/formikSlice\";\nimport { FormikSliceType } from \"../../store/models\";\nimport { useAppDispatch, useAppSelector } from \"../../store/hooks\";\nimport { API_URL } from \"../templates/api\";\ninterface useFormikSliceReturnType {\n  formikSlice: any;\n  setFormik: (state: FormikSliceType) => void;\n  setCaptcha: any;\n  newCaptcha: any;\n  resetGlobalFormik: any;\n}\n\n/**\n * useGlobalFormik\n *\n * React hook that passes additional information globally for the formik forms\n */\nconst useGlobalFormik = (): useFormikSliceReturnType => {\n  const dispatch = useAppDispatch();\n  const formikSlice = useAppSelector((state) => state.formik);\n\n  /**\n   * getNewCaptcha\n   *\n   * Axios get request to get new information for the CAPTCHA\n   */\n  const [, getNewCaptcha] = useAxios(\n    {\n      url: `${API_URL}/new_captcha`,\n      withCredentials: true,\n    },\n    { manual: true }\n  );\n\n  /**\n   * resetGlobalFormik\n   *\n   * Redux reducer wrapper that resets the formikSlice to its initial values\n   */\n  const resetGlobalFormik = () => {\n    dispatch(resetFormikSlice());\n  };\n\n  /**\n   * setCaptcha\n   *\n   * Redux reducer wrapper that sets current CAPTCHA information in formikSlice\n   */\n  const setCaptcha = (img: string, audio: string) => {\n    dispatch(setNewCaptcha({ img: img, audio: audio }));\n  };\n\n  /**\n   * setFormik\n   *\n   * Function that wraps formikSlice dispatch\n   */\n  const setFormik = ({ key, fieldsInfo, loading }: FormikSliceType) => {\n    dispatch(\n      setFormikSlice({\n        key,\n        fieldsInfo,\n        loading,\n      })\n    );\n  };\n\n  /**\n   * newCaptcha\n   *\n   * Function that makes a get request to get a new captcha img & audio\n   */\n  const newCaptcha = async () => {\n    const { data } = await getNewCaptcha();\n    if (data) {\n      setCaptcha(data.img, data.audio);\n    } else {\n      setCaptcha(\"\", \"\");\n    }\n  };\n\n  return {\n    formikSlice,\n    setFormik,\n    setCaptcha,\n    newCaptcha,\n    resetGlobalFormik,\n  };\n};\n\nexport default useGlobalFormik;\n","/**\n * Function prevents default behavior of form, to reload\n */\nexport function preventFormSubmission(e: React.KeyboardEvent<HTMLFormElement>) {\n  if (e.key === \"Enter\") {\n    e.preventDefault();\n  }\n}\n\n/**\n * Function that returns true if object has key success\n */\nexport function containsSuccess(obj: any) {\n  return obj?.hasOwnProperty(\"success\");\n}\n\n/**\n * Function that returns true if object has key error\n */\nexport function containsError(obj: any) {\n  return obj?.hasOwnProperty(\"error\");\n}\n\n/**\n * Function that returns true if string is empty\n */\nexport function emptyString(s: string) {\n  return s.length === 0;\n}\n\n/**\n * Function that overwrites the yup to schema object because\n */\nexport const fixYupToSchemaObject = (s: string) => {};\n\n/**\n * Function that uses binary search to get autocomplete input\n */\nconst findMatch = (text: string, which = \"first\", arr: String[]) => {\n  if (text) {\n    text = text.toLowerCase();\n    let start = 0;\n    let end = arr.length - 1;\n    let candidate_index = null;\n    while (start <= end) {\n      let mid = Math.floor((start + end) / 2);\n      let elem = arr[mid][0].toLowerCase();\n      if (elem.substr(0, text.length) === text) {\n        candidate_index = mid;\n        if (which === \"first\") end = mid - 1;\n        else start = mid + 1;\n      } else if (elem < text) start = mid + 1;\n      else end = mid - 1;\n    }\n    return candidate_index;\n  }\n};\nexport const matchItems = (text: string, arr: String[]) => {\n  let matches: any = [];\n  let start = findMatch(text, \"first\", arr); // get first match\n  let end = findMatch(text, \"last\", arr); // get last match\n  if (start != null && end != null) {\n    matches = arr.slice(start, end + 1);\n  }\n  if (matches.length > 0) {\n    matches.sort(function (a: string, b: string) {\n      return a[1] < b[1] ? 1 : -1;\n    });\n    matches = matches.slice(0, 5);\n  }\n  return matches;\n};\n\n/**\n * Function that gets all info of field given the property name\n */\nexport function getFieldInfo(arr: any[], property: string) {\n  return arr.filter((item: any) => item.property === property).shift();\n}\n","import FlaskForm from \"../../../common/components/FlaskForm\";\nimport useAPIDataAlert from \"../../../common/hooks/useAPIDataAlert\";\nimport AuthCard from \"../components/AuthCard\";\nimport AuthHeading from \"../components/AuthHeading\";\nimport AuthFooter from \"../components/AuthFooter\";\nimport RouterLink from \"../../../common/components/RouterLink\";\nimport usePageTitle from \"../../../common/hooks/usePageTitle\";\n\nconst KEY = \"verify_email_form\";\n\n/**\n * Unlock Account Page\n */\nconst UnlockAccountToken = () => {\n  usePageTitle(\"Unlock account\");\n  const { apiDataAlerter } = useAPIDataAlert();\n\n  // * Handles on form submit after data is sent\n  const handleSubmit = (data: any) => {\n    apiDataAlerter({\n      data: data,\n      successMsg: `You have unlocked your account ${data.success}`,\n    });\n  };\n\n  return (\n    <FlaskForm formKey={KEY} runAfterSubmit={handleSubmit}>\n      {({ isSubmitting }) => (\n        <AuthCard>\n          <AuthHeading\n            title=\"Success!\"\n            desc={`You have unlocked your account.`}\n          />\n          <AuthFooter>\n            <RouterLink link=\"/signin\" text=\"Back to sign in\" />\n          </AuthFooter>\n        </AuthCard>\n      )}\n    </FlaskForm>\n  );\n};\n\nexport default UnlockAccountToken;\n","import {\n  Box,\n  Card,\n  CardBody,\n  Flex,\n  useMediaQuery,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { ReactNode } from \"react\";\n\ninterface AppProps {\n  children: ReactNode;\n}\n\n/**\n * AuthCard\n *\n * React component that wraps around auth elements, centering it and giving it a fixed width\n */\nconst AuthCard = ({ children }: AppProps) => {\n  const [isSmallerThan500] = useMediaQuery(\"(max-width: 500px)\");\n  return (\n    <Flex w=\"100%\" h=\"90vh\" justify=\"center\" align=\"center\">\n      <Card w={isSmallerThan500 ? \"90%\" : \"450px\"} p={5} bg=\"white\">\n        <CardBody>{children}</CardBody>\n      </Card>\n    </Flex>\n  );\n};\n\nexport default AuthCard;\n","import { VStack } from \"@chakra-ui/react\";\nimport { ReactNode } from \"react\";\n\ninterface AppProps {\n  children: ReactNode;\n}\n\nconst AuthFooter = ({ children }: AppProps) => {\n  return <VStack mt={5}>{children}</VStack>;\n};\n\nexport default AuthFooter;\n","import { Heading, Text, VStack } from \"@chakra-ui/react\";\n\ninterface AppProps {\n  title: string;\n  desc: string;\n}\n\nconst AuthHeading = ({ title, desc }: AppProps) => {\n  return (\n    <VStack mb={5}>\n      <Heading w=\"100%\" textAlign=\"center\">\n        {title}\n      </Heading>\n      <Text textAlign=\"center\" color=\"gray.600\">\n        {desc}\n      </Text>\n    </VStack>\n  );\n};\n\nexport default AuthHeading;\n"],"names":["children","noValidate","handleSubmit","onKeyDown","e","code","preventDefault","onSubmit","undefined","h","align","justify","maxW","textAlign","color","formSession","postFormInput","initialValue","validationSchema","submitHandler","invalidToken","isSubmitting","formik","useFormik","initialValues","enableReinitialize","useEffect","timer","values","setTimeout","save_session","clearTimeout","AnimatePresence","motion","initial","opacity","animate","value","formKey","resetAfterSubmit","runAfterSubmit","useState","key","fields_info","initial_values","validation_schema","loading","hasToken","hasCaptcha","csrf_token","form","setForm","getBuildForm","useAxiosWrapper","url","method","getAxios","postAxios","params","useParams","useFormikState","setFormik","setCaptcha","resetGlobalFormik","buildForm","prevState","data","filter","field","property","length","validate_token","token","hasOwnProperty","formSchema","buildYup","config","forEach","refValueFor","addMatch","Yup","shape","confirm","oneOf","required","add","omit","concat","component","newShape","of","min","title","captcha","img","audio","fieldsInfo","submitTest","resetForm","sentData","text","link","linkProps","as","ReactRouterLink","to","showGlobalAlert","useGlobalAlert","useGlobalFormik","formikSlice","newCaptcha","standardAlertError","apiDataAlerter","onSuccess","successMsg","onFailure","failureMsg","containsSuccess","success","containsError","error","tryCatchWrapper","func","globalAlert","useAppSelector","state","alert","dispatch","useAppDispatch","toast","useToast","desc","status","duration","showAlert","position","description","isClosable","hideGlobalAlert","hideAlert","useAxios","API_URL","withCredentials","manual","getNewCaptcha","setNewCaptcha","setFormikSlice","resetFormikSlice","obj","findMatch","which","arr","toLowerCase","start","end","candidate_index","mid","Math","floor","elem","substr","matchItems","matches","slice","sort","a","b","getFieldInfo","item","shift","usePageTitle","useAPIDataAlert","useMediaQuery","isSmallerThan500","w","p","bg","mt","mb"],"sourceRoot":""}