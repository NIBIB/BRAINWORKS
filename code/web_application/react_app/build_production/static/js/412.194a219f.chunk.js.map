{"version":3,"file":"static/js/412.194a219f.chunk.js","mappings":"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","sources":["common/components/ActionLink/index.tsx","common/components/RouterLink/index.tsx","pages/auth-pages/SignUp/components/TermsOfService/index.tsx","pages/auth-pages/SignUp/components/SignUpSuccess/index.tsx","common/components/FlaskField/blocks/FormikTerms/index.tsx","pages/auth-pages/SignUp/components/SignUpForm/index.tsx","pages/auth-pages/SignUp/index.tsx","pages/auth-pages/components/AuthFooter/index.tsx","pages/auth-pages/components/AuthHeading/index.tsx"],"sourcesContent":["import { Link, LinkProps, TextProps } from \"@chakra-ui/react\";\n\ninterface AppProps {\n  onClick: () => void;\n  text: string;\n  linkProps?: LinkProps;\n  textProps?: TextProps;\n}\n\n/**\n * ActionLink\n *\n * React component that renders a ChakraUI link with an on click property\n */\nconst ActionLink = ({ onClick, text, linkProps, textProps }: AppProps) => {\n  return (\n    <Link as=\"span\" color=\"blue.600\" onClick={onClick} {...linkProps}>\n      {text}\n    </Link>\n  );\n};\n\nexport default ActionLink;\n","import { Link, LinkProps } from \"@chakra-ui/react\";\nimport { Link as ReactRouterLink } from \"react-router-dom\";\n\ninterface AppProps {\n  text: string;\n  link: string;\n  linkProps?: LinkProps;\n}\nconst RouterLink = ({ text, link, linkProps }: AppProps) => {\n  return (\n    <Link color=\"blue.600\" as={ReactRouterLink} to={link} {...linkProps}>\n      {text}\n    </Link>\n  );\n};\n\nexport default RouterLink;\n","import {\n  Heading,\n  ListItem,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  UnorderedList,\n  VStack,\n} from \"@chakra-ui/react\";\n\nimport { gray300 } from \"../../../../../setup/theme/colors\";\n\nconst TOS_BULLETS = [\n  \"You must be at least 18 years of age to register an account.\",\n  \"You must allow us to contact you via email to request feedback about our service.\",\n  \"We are not responsible for any misinformation that may be encountered during use of this website. All data is pulled from existing publications without any guarantee of validity.\",\n  \"You may not use the information obtained for commercial gain\",\n  \"You may not attempt to harvest data from our service by means other than what we provide.\",\n  \"We reserve the right to terminate your account at any time if your activity is deemed to be in violation of these terms.\",\n];\n\nconst DATA_POLICY = [\n  {\n    heading: \"Personal Information\",\n    desc: \"We collect all personal information that you voluntarily provide to us upon registration, including your name and email address. This information will not be shared with anyone and is securely protected. In the unlikely event of a data breach, we will promptly notify you if we determine that your data has been compromised. We also ask for information pertaining to your affiliated company or institution, including its name, country of operation, and your department and position within it. This information will be used to identify general usage trends of your institution. We may use this information to contact you for feedback. With your consent, we may also ask to post a testimonial regarding your use of our service.\",\n  },\n  {\n    heading: \"Data Collection\",\n    desc: \"Some information will be automatically collected upon vising our website, such as your Internet Protocol (IP) address and your device/browser characteristics. While viewing out site, we also record the date and time of access, pages viewed, searches made, and actions taken within the scope of our service. This information does not reveal your identity and is needed to maintain the security and operation of our website, as well as for internal analytics. We also collect information through the use of cookies, which is necessary for the function of our service. If you choose to block the use of cookies for our website, you may not be able to use some portions of our service. We may use this data for analytic purposes such as data analysis, identifying usage trends, tracking user engagement, and monitoring traffic to our website. This data is stored in an aggregated and anonymous form such that individuals cannot be identified.\",\n  },\n  {\n    heading: \"Children's Privacy\",\n    desc: \"We do not knowingly collect personal information from children under the age of 18. If we learn that the personal information of an individual under 18 has been provided, we will deactivate the account and remove all associated information from our records. If you are a parent or guardian and you are aware that your child has provided us with personal information, please contact us so that we may take action.\",\n  },\n  {\n    heading: \"Future changes to this policy\",\n    desc: \"We may update our Privacy Policy from time to time. Thus, we advise you to review this page periodically for any changes. These changes are effective immediately when posted on our website. If you have questions or feedback about our data policy, do not hesitate to contact us.\",\n  },\n];\n\ninterface AppProps {\n  /**\n   * `function` - ChakraUI close modal callback\n   */\n  onClose: () => void;\n  /**\n   * `boolean` - ChakraUI's modal boolean to determine if the modal should be shown\n   */\n  isOpen: boolean;\n}\n\n/**\n * TermsOfService\n *\n * React component that renders a centered modal displaying all the terms of service\n */\nconst TermsOfService = ({ onClose, isOpen }: AppProps) => {\n  return (\n    <>\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"500px\">\n          <ModalHeader borderBottom={`1px solid ${gray300}`}>\n            Terms and conditions\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody h={300} overflowY=\"scroll\">\n            <VStack spacing={5} py={5}>\n              {/* Map TOS Bullets */}\n              <VStack align=\"flex-start\">\n                <Heading size=\"md\">Terms of service</Heading>\n                <UnorderedList pl={3}>\n                  {TOS_BULLETS.map((item, i) => (\n                    <ListItem key={i} py={3} fontSize=\"sm\">\n                      {item}\n                    </ListItem>\n                  ))}\n                </UnorderedList>\n              </VStack>\n              {/* Map data policy */}\n              {DATA_POLICY.map((item, i) => (\n                <VStack key={i} spacing={5} align=\"flex-start\">\n                  <Heading size=\"md\">{item.heading}</Heading>\n                  <Text fontSize=\"sm\">{item.desc}</Text>\n                </VStack>\n              ))}\n            </VStack>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default TermsOfService;\n","import { Button, Container, Flex } from \"@chakra-ui/react\";\nimport { Link } from \"react-router-dom\";\nimport RouterLink from \"../../../../../common/components/RouterLink\";\nimport AuthFooter from \"../../../components/AuthFooter\";\nimport AuthHeading from \"../../../components/AuthHeading\";\n\ninterface AppProps {\n  /**\n   * `email` - State of email of user who successfully signs up\n   * `instructions` - Instructions to be displayed for users after signup\n   */\n  email: string;\n  instructions: string;\n}\n\n/**\n * SignUpSuccess\n *\n * React component that renders the success screen that prompts the user to verify their email\n */\nconst SignUpSuccess = ({ email, instructions }: AppProps) => {\n  return (\n    <Flex w=\"100vw\" h=\"90vh\" justify=\"center\" align=\"center\">\n      <Container maxW=\"lg\">\n        <AuthHeading\n          title=\"Account created!\"\n          desc={instructions}\n        />\n        <AuthFooter>\n          <Link to=\"/send-verification-email\">\n            <Button>Resend verification email</Button>\n          </Link>\n          <RouterLink link=\"/signin\" text=\"Back to sign in\" />\n        </AuthFooter>\n      </Container>\n    </Flex>\n  );\n};\n\nexport default SignUpSuccess;\n","import {\n  Checkbox,\n  FormErrorMessage,\n  FormLabel,\n  HStack,\n} from \"@chakra-ui/react\";\nimport { Field, useFormikContext } from \"formik\";\nimport { FormControl } from \"formik-chakra-ui\";\n\nimport ActionLink from \"../../../ActionLink\";\n\ninterface AppProps {\n  /**\n   * `function` - Executes when clicking on the action link\n   */\n  action: any;\n  /**\n   * `string` - Form key to generate form from backend\n   */\n  formKey: string;\n}\n\n/**\n * FormikCheckbox\n *\n * React component that wraps ChakraUI checkbox component with formik logic for an agree to terms field\n */\nconst FormikTerms = ({ action, formKey }: AppProps) => {\n  const formik = useFormikContext<any>();\n  const { errors, touched } = formik;\n\n  return (\n    <FormControl\n      as={\"span\"}\n      isRequired\n      isInvalid={!!errors[\"terms\"] && !!touched[\"terms\"]}\n      name={\"terms\"}\n    >\n      <HStack align=\"center\" justify=\"center\">\n        <FormLabel mb={0} htmlFor=\"terms\">\n          Agree to{\" \"}\n          <ActionLink\n            text=\"terms of service\"\n            onClick={() => {\n              if (action) {\n                action();\n              }\n            }}\n          />\n        </FormLabel>\n        <Field as={Checkbox} name=\"terms\" />\n      </HStack>\n      <FormErrorMessage>{errors[\"terms\"]?.toString()}</FormErrorMessage>\n    </FormControl>\n  );\n};\n\nexport default FormikTerms;\n","import {\n  Button,\n  Card,\n  CardBody,\n  Container,\n  Divider,\n  Flex,\n  SimpleGrid,\n  VStack,\n} from \"@chakra-ui/react\";\nimport FlaskField from \"common/components/FlaskField\";\nimport RouterLink from \"common/components/RouterLink\";\nimport AuthFooter from \"pages/auth-pages/components/AuthFooter\";\nimport AuthHeading from \"pages/auth-pages/components/AuthHeading\";\n\nimport FlaskForm from \"../../../../../common/components/FlaskForm\";\nimport FormikTerms from \"../../../../../common/components/FlaskField/blocks/FormikTerms\";\nimport useAPIDataAlert from \"../../../../../common/hooks/useAPIDataAlert\";\n\nconst KEY = \"sign_up_form\";\n\ninterface AppProps {\n  /**\n   * `function` - Callback for ChakraUI's open modal which opens the TOS screen\n   */\n  onOpen: () => void;\n  /**\n   * `function` - Setter for email when user successfully signs up, so the success screen can display their email\n   */\n  setEmail: React.Dispatch<React.SetStateAction<string>>;\n  setInstructions: React.Dispatch<React.SetStateAction<string>>;  // sets the instructions to be displayed after signup\n}\n\n/**\n * SignUpForm\n *\n * React component that renders the sign up form from the backend\n */\nconst SignUpForm = ({ onOpen, setEmail, setInstructions }: AppProps) => {\n  const { apiDataAlerter } = useAPIDataAlert();\n\n  // * Handles on form submit after data is sent\n  const handleSubmit = (data: any) => {\n    const createSuccess = () => {\n      setEmail(data?.email);\n      setInstructions(data?.instructions)\n    };\n    apiDataAlerter({\n      onSuccess: createSuccess,\n      data: data,\n      successMsg: data?.success,\n      failureMsg: data?.error\n    });\n\n  };\n\n  return (\n    <FlaskForm\n      formKey={KEY}\n      runAfterSubmit={handleSubmit}\n      resetAfterSubmit={{ password: \"\", confirm: \"\", math: \"\" }}\n    >\n      {({ isSubmitting }) => (\n        <Flex w=\"100vw\" minHeight=\"90vh\" justify=\"center\" align=\"center\">\n          <Card bg=\"white\" maxW=\"2xl\" p={5} my={50}>\n            <CardBody>\n              <AuthHeading\n                title=\"Create an account.\"\n                desc=\" Gain full access to our tools by creating an account.\"\n              />\n              <SimpleGrid columns={{ base: 1, sm: 2 }} spacing={3} pb={3}>\n                {/* Name, email, password, confirm password */}\n                <FlaskField property=\"name\" />\n                <FlaskField property=\"email\" />\n                <FlaskField property=\"password\" />\n                <FlaskField property=\"confirm\" />\n              </SimpleGrid>\n              <VStack spacing={3}>\n                <SimpleGrid columns={{ base: 1, sm: 4 }} spacing={3} w=\"100%\">\n                  {/* Company, country, position, department */}\n                  <FlaskField property=\"company\" />\n                  <FlaskField property=\"country\" />\n                  <FlaskField property=\"position\" />\n                  <FlaskField property=\"department\" />\n                </SimpleGrid>\n                {/* Why BRAINWORKS */}\n                <Flex\n                  justify=\"center\"\n                  w=\"100%\"\n                  gap={5}\n                  direction={{ base: \"column\", sm: \"row\" }}\n                >\n                  <VStack justify=\"center\" align=\"space-between\" w=\"50%\">\n                    <FlaskField property=\"purpose\" />\n                    <FormikTerms action={onOpen} formKey={KEY} />\n                  </VStack>\n                  <FlaskField property=\"math\" />\n                </Flex>\n                <Divider />\n                <Button\n                  type=\"submit\"\n                  colorScheme=\"blue\"\n                  width=\"xs\"\n                  isDisabled={isSubmitting}\n                >\n                  Sign up\n                </Button>\n              </VStack>\n              <AuthFooter>\n                <RouterLink\n                  text=\"Already have an account? Sign in\"\n                  link={\"/signin\"}\n                />\n              </AuthFooter>\n            </CardBody>\n          </Card>\n        </Flex>\n      )}\n    </FlaskForm>\n  );\n};\n\nexport default SignUpForm;\n","import { Container, useDisclosure } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\n\nimport TermsOfService from \"./components/TermsOfService\";\nimport SignUpSuccess from \"./components/SignUpSuccess\";\nimport usePageTitle from \"../../../common/hooks/usePageTitle\";\nimport SignUpForm from \"./components/SignUpForm\";\n\n/**\n * SignUp\n *\n * React component that renders sign up page from backend\n */\nconst SignUp = () => {\n  // * Changes document title to \"Sign up\"\n  usePageTitle(\"Sign up\");\n  // * ChakraUI's modal opening commands\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  // * Once a user successfully signs in, will send a greeting message given this state value\n  const [email, setEmail] = useState(\"\");\n  const [instructions, setInstructions] = useState(\"\")\n\n  return (\n    <>\n      <TermsOfService onClose={onClose} isOpen={isOpen} />\n      {email?.length === 0 ? (\n        <SignUpForm setEmail={setEmail} setInstructions={setInstructions} onOpen={onOpen} />\n      ) : (\n        <SignUpSuccess email={email} instructions={instructions} />\n      )}\n    </>\n  );\n};\nexport default SignUp;\n","import { VStack } from \"@chakra-ui/react\";\nimport { ReactNode } from \"react\";\n\ninterface AppProps {\n  children: ReactNode;\n}\n\nconst AuthFooter = ({ children }: AppProps) => {\n  return <VStack mt={5}>{children}</VStack>;\n};\n\nexport default AuthFooter;\n","import { Heading, Text, VStack } from \"@chakra-ui/react\";\n\ninterface AppProps {\n  title: string;\n  desc: string;\n}\n\nconst AuthHeading = ({ title, desc }: AppProps) => {\n  return (\n    <VStack mb={5}>\n      <Heading w=\"100%\" textAlign=\"center\">\n        {title}\n      </Heading>\n      <Text textAlign=\"center\" color=\"gray.600\">\n        {desc}\n      </Text>\n    </VStack>\n  );\n};\n\nexport default AuthHeading;\n"],"names":["onClick","text","linkProps","textProps","as","color","link","ReactRouterLink","to","TOS_BULLETS","DATA_POLICY","heading","desc","onClose","isOpen","isCentered","h","borderBottom","gray300","overflowY","spacing","py","align","size","pl","map","item","i","fontSize","email","instructions","w","justify","maxW","AuthHeading","title","AuthFooter","RouterLink","action","formik","formKey","useFormikContext","errors","touched","isRequired","isInvalid","name","mb","htmlFor","ActionLink","Checkbox","toString","KEY","onOpen","setEmail","setInstructions","apiDataAlerter","useAPIDataAlert","FlaskForm","runAfterSubmit","data","onSuccess","successMsg","success","failureMsg","error","resetAfterSubmit","password","confirm","math","isSubmitting","minHeight","bg","p","my","columns","base","sm","pb","FlaskField","property","gap","direction","type","colorScheme","width","isDisabled","usePageTitle","useDisclosure","useState","length","children","mt","textAlign"],"sourceRoot":""}