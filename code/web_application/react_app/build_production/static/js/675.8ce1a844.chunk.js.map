{"version":3,"file":"static/js/675.8ce1a844.chunk.js","mappings":"+JAiFA,IAvDmB,SAAC,GAKG,IAJrBA,EAIoB,EAJpBA,WACAC,EAGoB,EAHpBA,cACAC,EAEoB,EAFpBA,aACAC,EACoB,EADpBA,UAEAC,EAAAA,GAAAA,SACEC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,EACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,IAGF,IAAMC,EAAoBhB,IAAY,UAASA,GAEzCiB,EAAgC,QAAdhB,GAAuB,CAC7CiB,OAAQ,CACNC,EAAG,CACDC,MAAO,CACLC,UAAW,MAMbC,GAAO,gBACXC,YAAY,EACZC,qBAAqB,EACrBC,SAAU,CACRC,SAAU,YAGTT,GACAD,GAKCW,EAAO,CACXC,OAHa9B,EAIb+B,SAAU9B,GAGZ,OAAO,SAAC,KAAD,CAAO+B,KAAM7B,EAAWqB,QAASA,EAASK,KAAMA,GACxD,C,qICsCD,UAjGa,WACX,IAAQI,GAAaC,EAAAA,EAAAA,GAAgB,CACnCC,IAAK,OACLC,OAAQ,QAFFH,SAIR,GAA8BI,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAwBF,EAAAA,EAAAA,UAAc,MAAtC,eAAOR,EAAP,KAAaW,EAAb,KACA,GAAsBH,EAAAA,EAAAA,UAAS,IAA/B,eAAOI,EAAP,KAAYC,EAAZ,KAsBA,OArBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,yCAAG,oGACdL,GAAW,GADG,SAEiBN,IAFjB,gBAEAY,EAFA,EAENhB,KACRW,EAAQK,EAAOC,SACfC,QAAQC,IAAIH,GACNI,EAAUJ,EAAOC,QAAQI,KAAI,SAACC,EAAcC,GAChD,MAAO,CACLC,MAAM,GAAD,OAAKF,EAAQG,MAAb,cACLzB,KAAMsB,EAAQtB,KAAKqB,KAAI,SAACK,GAAD,OAAyBA,EAAKC,KAA9B,IACvBC,aAAaC,EAAAA,EAAAA,GAAWN,GACxBO,iBAAiBD,EAAAA,EAAAA,GAAWN,GAC5BQ,QAAS,GAEZ,IACDlB,EAAOO,GACPV,GAAW,GAfG,4CAAH,qDAiBbK,GACD,GAAE,KAGD,gCACGN,GACC,uCAEA,UAAC,KAAD,CAAMuB,KAAK,MAAMC,GAAG,QAAQC,EAAE,QAA9B,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAASC,KAAK,KAAd,4CAEF,SAAC,KAAD,WACE,SAAC,IAAD,CAEEhE,WAAY6B,EAAK,GAAGA,KAAKqB,KACvB,SAACK,GAAD,OAAyB,IAAIU,KAAKV,EAAKW,KAAvC,IAEFjE,cAAewC,EACftC,UAAW,OACXD,aAAc,CACZiE,QAAS,CACPC,MAAO,CACLC,KAAM,QACNC,WAAW,GAEbC,QAAS,CACPF,KAAM,QACNC,WAAW,EACXE,kBAAkB,IAGtBC,SAAU,CACRC,MAAO,CACLC,OAAQ,IAGZvD,OAAQ,CACNwD,EAAG,CACDC,KAAM,CACJC,SAAS,EACTC,YAAY,GAGd/C,KAAM,OACNgD,KAAM,CACJC,KAAM,QACNC,eAAgB,CACdC,MAAO,SAIb9D,EAAG,CACD+D,UAAW,CACTN,SAAS,GAEXD,KAAM,CACJC,SAAS,EACTC,YAAY,aAQzB,MAGR,C,qECxGM,SAASrB,EAAWN,GACzB,IAAMiC,EAAS,CACbC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GAGF,OAAOR,EAAOjC,EAAQiC,EAAOS,OAC9B,C","sources":["common/components/Charts/ReactChart.tsx","pages/Test/index.tsx","setup/theme/utils/index.ts"],"sourcesContent":["import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  PointElement,\n  LineElement,\n  BarController,\n  PieController,\n  LineController,\n  TimeScale,\n} from \"chart.js\";\nimport { Chart } from \"react-chartjs-2\";\nimport { ReactChartType } from \"../../models\";\n// @ts-ignore\nimport \"chartjs-adapter-date-fns\";\n\n/**\n * React Chart\n *\n * React component which wraps React ChartJS, reducing boiler plate code for ChartJS\n */\nconst ReactChart = ({\n  chartXAxis,\n  chartDatasets,\n  chartOptions,\n  chartType,\n}: ReactChartType) => {\n  ChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n    ArcElement,\n    PointElement,\n    LineElement,\n    BarController,\n    PieController,\n    LineController,\n    TimeScale\n  );\n\n  const reactChartOptions = chartOptions && { ...chartOptions };\n\n  const barChartOptions = chartType === \"bar\" && {\n    scales: {\n      y: {\n        ticks: {\n          precision: 0,\n        },\n      },\n    },\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    tooltips: {\n      position: \"nearest\",\n    },\n\n    ...barChartOptions,\n    ...reactChartOptions,\n  };\n\n  const labels = chartXAxis;\n\n  const data = {\n    labels,\n    datasets: chartDatasets,\n  };\n\n  return <Chart type={chartType} options={options} data={data} />;\n};\n\nexport default ReactChart;\n","import {\n  Box,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Divider,\n  Heading,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n} from \"@chakra-ui/react\";\nimport ReactChart from \"common/components/Charts/ReactChart\";\nimport useAxiosWrapper from \"common/hooks/useAxiosWrapper\";\nimport { Field } from \"formik\";\nimport { ChartDataType } from \"pages/dashboard/admin/components/stats/user-stats/UserStats\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { brand300a, brand400 } from \"setup/theme/colors\";\nimport { getPallete } from \"setup/theme/utils\";\n\nconst Test = () => {\n  const { getAxios } = useAxiosWrapper({\n    url: \"test\",\n    method: \"GET\",\n  });\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState<any>(null);\n  const [arr, setArr] = useState([]);\n  useEffect(() => {\n    const getData = async () => {\n      setLoading(true);\n      const { data: charts } = await getAxios();\n      setData(charts.success);\n      console.log(charts);\n      const newData = charts.success.map((dataSet: any, index: number) => {\n        return {\n          label: `${dataSet.topic} citations`,\n          data: dataSet.data.map((item: ChartDataType) => item.value),\n          borderColor: getPallete(index),\n          backgroundColor: getPallete(index),\n          tension: 0.1,\n        };\n      });\n      setArr(newData);\n      setLoading(false);\n    };\n    getData();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <div>loading </div>\n      ) : (\n        <Card maxW=\"5xl\" bg=\"white\" h=\"500px\">\n          <CardHeader>\n            <Heading size=\"md\">Citation interest over time</Heading>\n          </CardHeader>\n          <CardBody>\n            <ReactChart\n              // Picking arbitrary dataset to be x-axis because they're the same\n              chartXAxis={data[0].data.map(\n                (item: ChartDataType) => new Date(item.name)\n              )}\n              chartDatasets={arr}\n              chartType={\"line\"}\n              chartOptions={{\n                plugins: {\n                  hover: {\n                    mode: \"index\",\n                    intersect: false,\n                  },\n                  tooltip: {\n                    mode: \"index\",\n                    intersect: false,\n                    includeInvisible: true,\n                  },\n                },\n                elements: {\n                  point: {\n                    radius: 0,\n                  },\n                },\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n\n                    type: \"time\",\n                    time: {\n                      unit: \"month\",\n                      displayFormats: {\n                        month: \"MMM\",\n                      },\n                    },\n                  },\n                  y: {\n                    gridLines: {\n                      display: true,\n                    },\n                    grid: {\n                      display: true,\n                      drawBorder: false,\n                    },\n                  },\n                },\n              }}\n            />\n          </CardBody>\n        </Card>\n      )}{\" \"}\n    </>\n  );\n};\n\nexport default Test;\n","import {\n  blueGenA,\n  greenGenA,\n  lightBlueGenA,\n  orangeGenA,\n  pinkGenA,\n  purpleGenA,\n  redGenA,\n  yellowGenA,\n} from \"../colors\";\n\nexport function getPallete(index: number) {\n  const colors = [\n    redGenA,\n    orangeGenA,\n    yellowGenA,\n    greenGenA,\n    lightBlueGenA,\n    blueGenA,\n    pinkGenA,\n    purpleGenA,\n  ];\n\n  return colors[index % colors.length];\n}\n"],"names":["chartXAxis","chartDatasets","chartOptions","chartType","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","ArcElement","PointElement","LineElement","BarController","PieController","LineController","TimeScale","reactChartOptions","barChartOptions","scales","y","ticks","precision","options","responsive","maintainAspectRatio","tooltips","position","data","labels","datasets","type","getAxios","useAxiosWrapper","url","method","useState","loading","setLoading","setData","arr","setArr","useEffect","getData","charts","success","console","log","newData","map","dataSet","index","label","topic","item","value","borderColor","getPallete","backgroundColor","tension","maxW","bg","h","size","Date","name","plugins","hover","mode","intersect","tooltip","includeInvisible","elements","point","radius","x","grid","display","drawBorder","time","unit","displayFormats","month","gridLines","colors","redGenA","orangeGenA","yellowGenA","greenGenA","lightBlueGenA","blueGenA","pinkGenA","purpleGenA","length"],"sourceRoot":""}