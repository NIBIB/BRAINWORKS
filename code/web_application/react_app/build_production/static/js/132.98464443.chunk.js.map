{"version":3,"file":"static/js/132.98464443.chunk.js","mappings":"4IAsBA,IARmB,SAAC,GAAuD,IAArDA,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,UAAqC,EAA1BC,UAC9C,OACE,SAAC,MAAD,gBAAMC,GAAG,OAAOC,MAAM,WAAWL,QAASA,GAAaE,GAAvD,aACGD,IAGN,C,iECJD,IARmB,SAAC,GAAyC,IAAvCA,EAAsC,EAAtCA,KAAMK,EAAgC,EAAhCA,KAAMJ,EAA0B,EAA1BA,UAChC,OACE,SAAC,MAAD,gBAAMG,MAAM,WAAWD,GAAIG,EAAAA,GAAiBC,GAAIF,GAAUJ,GAA1D,aACGD,IAGN,C,qLC4ED,UAjE2B,YACzBQ,EAAAA,EAAAA,GAAa,mBACb,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAmBC,EAAAA,EAAAA,KAAnBD,eACFE,GAAWC,EAAAA,EAAAA,MAgBjB,OACE,SAAC,IAAD,CACEC,QA7BM,uBA8BNC,eAhBiB,SAACC,GAKpBC,QAAQC,IAAIF,GACZN,EAAe,CACbM,KAAMA,EACNG,UAPmB,WACnBV,EAAQ,OAACO,QAAD,IAACA,OAAD,EAACA,EAAMI,SACfR,EAAS,UACV,EAKCS,WAAW,6DAAD,cAA+DL,QAA/D,IAA+DA,OAA/D,EAA+DA,EAAMI,SAC/EE,WAAU,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAMO,OAErB,EAKGC,iBAAkB,CAAEhB,MAAO,GAAIiB,KAAM,IAHvC,SAKG,gBAAGC,EAAH,EAAGA,aAAH,OACC,UAAC,IAAD,YACE,SAAC,IAAD,CACEC,MAAM,mBACNC,KAAK,8EAEP,UAAC,KAAD,CAAQC,QAAS,EAAGC,MAAM,SAA1B,WAEE,SAAC,IAAD,CAAYC,SAAS,WACrB,SAAC,KAAD,CAAKC,EAAE,OAAP,UACE,SAAC,IAAD,CAAYD,SAAS,YAEvB,SAAC,KAAD,CACEE,KAAK,SACLC,YAAY,OACZC,MAAM,OACNC,WAAYV,EAJd,oCASF,UAAC,IAAD,YACE,SAAC,IAAD,CAAY5B,KAAK,kBAAkBK,KAAK,YAEvCK,EAAM6B,OAAS,IACd,SAAC,IAAD,CACExC,QAAS,WACPY,EAAS,GACV,EACDX,KAAK,8CA7Bd,GAqCN,C,4EC1DD,IAXiB,SAAC,GAA4B,IAA1BwC,EAAyB,EAAzBA,SAClB,GAA2BC,EAAAA,EAAAA,IAAc,sBAAlCC,GAAP,eACA,OACE,SAAC,KAAD,CAAMR,EAAE,OAAOS,EAAE,OAAOC,QAAQ,SAASZ,MAAM,SAA/C,UACE,SAAC,KAAD,CAAME,EAAGQ,EAAmB,MAAQ,QAASG,EAAG,EAAGC,GAAG,QAAtD,UACE,SAAC,KAAD,UAAWN,OAIlB,C,8CCjBD,IAJmB,SAAC,GAA4B,IAA1BA,EAAyB,EAAzBA,SACpB,OAAO,SAAC,KAAD,CAAQO,GAAI,EAAZ,SAAgBP,GACxB,C,8CCWD,IAboB,SAAC,GAA+B,IAA7BX,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAC5B,OACE,UAAC,KAAD,CAAQkB,GAAI,EAAZ,WACE,SAAC,KAAD,CAASd,EAAE,OAAOe,UAAU,SAA5B,SACGpB,KAEH,SAAC,KAAD,CAAMoB,UAAU,SAAS7C,MAAM,WAA/B,SACG0B,MAIR,C","sources":["common/components/ActionLink/index.tsx","common/components/RouterLink/index.tsx","pages/auth-pages/ForgotPassword/index.tsx","pages/auth-pages/components/AuthCard/index.tsx","pages/auth-pages/components/AuthFooter/index.tsx","pages/auth-pages/components/AuthHeading/index.tsx"],"sourcesContent":["import { Link, LinkProps, TextProps } from \"@chakra-ui/react\";\n\ninterface AppProps {\n  onClick: () => void;\n  text: string;\n  linkProps?: LinkProps;\n  textProps?: TextProps;\n}\n\n/**\n * ActionLink\n *\n * React component that renders a ChakraUI link with an on click property\n */\nconst ActionLink = ({ onClick, text, linkProps, textProps }: AppProps) => {\n  return (\n    <Link as=\"span\" color=\"blue.600\" onClick={onClick} {...linkProps}>\n      {text}\n    </Link>\n  );\n};\n\nexport default ActionLink;\n","import { Link, LinkProps } from \"@chakra-ui/react\";\nimport { Link as ReactRouterLink } from \"react-router-dom\";\n\ninterface AppProps {\n  text: string;\n  link: string;\n  linkProps?: LinkProps;\n}\nconst RouterLink = ({ text, link, linkProps }: AppProps) => {\n  return (\n    <Link color=\"blue.600\" as={ReactRouterLink} to={link} {...linkProps}>\n      {text}\n    </Link>\n  );\n};\n\nexport default RouterLink;\n","import { useState } from \"react\";\n\nimport AuthCard from \"../components/AuthCard\";\nimport usePageTitle from \"../../../common/hooks/usePageTitle\";\n\n/**\n * Forgot password page\n */\nimport { Box, Button, VStack } from \"@chakra-ui/react\";\nimport ActionLink from \"common/components/ActionLink\";\nimport RouterLink from \"common/components/RouterLink\";\nimport AuthFooter from \"pages/auth-pages/components/AuthFooter\";\nimport AuthHeading from \"pages/auth-pages/components/AuthHeading\";\nimport useAPIDataAlert from \"common/hooks/useAPIDataAlert\";\nimport FlaskForm from \"common/components/FlaskForm\";\nimport { useNavigate } from \"react-router-dom\";\nimport FlaskField from \"common/components/FlaskField\";\n\nconst KEY = \"forgot_password_form\";\n\n/**\n * ForgotPasswordForm\n *\n * React component for the forgot password form with parameters generated from the back end\n */\nconst ForgotPasswordForm = () => {\n  usePageTitle(\"Forgot password\");\n  const [email, setEmail] = useState(\"\");\n  const { apiDataAlerter } = useAPIDataAlert();\n  const navigate = useNavigate();\n\n  // * Handles on form submit after data is sent\n  const handleSubmit = (data: any) => {\n    const resetSuccess = () => {\n      setEmail(data?.success);\n      navigate(\"/signin\");\n    };\n    console.log(data)\n    apiDataAlerter({\n      data: data,\n      onSuccess: resetSuccess,\n      successMsg: `You have successfully sent your password reset request to ${data?.success}`,\n      failureMsg: data?.error\n    });\n  };\n  return (\n    <FlaskForm\n      formKey={KEY}\n      runAfterSubmit={handleSubmit}\n      resetAfterSubmit={{ email: \"\", math: \"\" }}\n    >\n      {({ isSubmitting }) => (\n        <AuthCard>\n          <AuthHeading\n            title=\"Forgot password?\"\n            desc=\"You will receive an email with instructions for resetting your password.\"\n          />\n          <VStack spacing={5} align=\"center\">\n            {/* Email, CAPTCHA */}\n            <FlaskField property=\"email\" />\n            <Box w=\"100%\">\n              <FlaskField property=\"math\" />\n            </Box>\n            <Button\n              type=\"submit\"\n              colorScheme=\"blue\"\n              width=\"full\"\n              isDisabled={isSubmitting}\n            >\n              Request reset link\n            </Button>\n          </VStack>\n          <AuthFooter>\n            <RouterLink text=\"Back to sign in\" link=\"/signin\" />\n            {/* Send another password change request */}\n            {email.length > 0 && (\n              <ActionLink\n                onClick={() => {\n                  setEmail(\"\");\n                }}\n                text=\"Send another password reset request.\"\n              />\n            )}\n          </AuthFooter>\n        </AuthCard>\n      )}\n    </FlaskForm>\n  );\n};\n\nexport default ForgotPasswordForm;\n","import {\n  Box,\n  Card,\n  CardBody,\n  Flex,\n  useMediaQuery,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { ReactNode } from \"react\";\n\ninterface AppProps {\n  children: ReactNode;\n}\n\n/**\n * AuthCard\n *\n * React component that wraps around auth elements, centering it and giving it a fixed width\n */\nconst AuthCard = ({ children }: AppProps) => {\n  const [isSmallerThan500] = useMediaQuery(\"(max-width: 500px)\");\n  return (\n    <Flex w=\"100%\" h=\"90vh\" justify=\"center\" align=\"center\">\n      <Card w={isSmallerThan500 ? \"90%\" : \"450px\"} p={5} bg=\"white\">\n        <CardBody>{children}</CardBody>\n      </Card>\n    </Flex>\n  );\n};\n\nexport default AuthCard;\n","import { VStack } from \"@chakra-ui/react\";\nimport { ReactNode } from \"react\";\n\ninterface AppProps {\n  children: ReactNode;\n}\n\nconst AuthFooter = ({ children }: AppProps) => {\n  return <VStack mt={5}>{children}</VStack>;\n};\n\nexport default AuthFooter;\n","import { Heading, Text, VStack } from \"@chakra-ui/react\";\n\ninterface AppProps {\n  title: string;\n  desc: string;\n}\n\nconst AuthHeading = ({ title, desc }: AppProps) => {\n  return (\n    <VStack mb={5}>\n      <Heading w=\"100%\" textAlign=\"center\">\n        {title}\n      </Heading>\n      <Text textAlign=\"center\" color=\"gray.600\">\n        {desc}\n      </Text>\n    </VStack>\n  );\n};\n\nexport default AuthHeading;\n"],"names":["onClick","text","linkProps","textProps","as","color","link","ReactRouterLink","to","usePageTitle","useState","email","setEmail","apiDataAlerter","useAPIDataAlert","navigate","useNavigate","formKey","runAfterSubmit","data","console","log","onSuccess","success","successMsg","failureMsg","error","resetAfterSubmit","math","isSubmitting","title","desc","spacing","align","property","w","type","colorScheme","width","isDisabled","length","children","useMediaQuery","isSmallerThan500","h","justify","p","bg","mt","mb","textAlign"],"sourceRoot":""}