{"version":3,"file":"static/js/929.91fee12a.chunk.js","mappings":"qJAgBA,IARmB,SAAC,GAAyC,IAAvCA,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,UAChC,OACE,SAAC,MAAD,gBAAMC,MAAM,WAAWC,GAAIC,EAAAA,GAAiBC,GAAIL,GAAUC,GAA1D,aACGF,IAGN,C,6LCiDD,EA/CwB,SAAC,GAAuC,IAArCO,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,SAC5BC,GAAmBC,EAAAA,EAAAA,KAAnBD,eAeR,OACE,SAACE,EAAA,EAAD,CAAWC,QA3BH,kCA2BiBC,eAbN,SAACC,GAKpBL,EAAe,CACbM,UALmB,WACnBR,GAAU,GACVC,EAASM,EAAKE,QACf,EAGCC,WAAW,8BAAD,OAAgCH,EAAKE,SAC/CF,KAAMA,GAET,EAGC,SACG,gBAAGI,EAAH,EAAGA,aAAH,OACC,iCACE,SAACC,EAAA,EAAD,CACEC,MAAM,oBACNC,KAAK,6DAGP,UAAC,KAAD,CAAQC,QAAS,EAAjB,WAEE,SAACC,EAAA,EAAD,CAAYC,SAAS,WACrB,SAAC,KAAD,CAAKC,EAAE,OAAP,UACE,SAACF,EAAA,EAAD,CAAYC,SAAS,YAGvB,SAAC,KAAD,CACEE,KAAK,SACLC,YAAY,OACZC,MAAM,OACNC,WAAYX,EAJd,kDAdL,GA2BN,E,UC/BD,EApB2B,SAAC,GAAoC,IAAlCY,EAAiC,EAAjCA,MAAOvB,EAA0B,EAA1BA,UACnC,OACE,iCACE,SAACY,EAAA,EAAD,CACEC,MAAM,WACNC,KAAI,oCAA+BS,EAA/B,6MAEN,SAACC,EAAA,EAAD,WACE,SAAC,KAAD,CACEC,QAAS,WACPzB,GAAU,EACX,EAHH,mDAUP,ECGD,EAnBoB,YAClB0B,EAAAA,EAAAA,GAAa,gBACb,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOJ,EAAP,KAActB,EAAd,KACA,GAA4B0B,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAe5B,EAAf,KAEA,OACE,SAAC6B,EAAA,EAAD,WACE,UAAC,KAAD,CAAQd,QAAS,EAAjB,UACGa,GACC,SAAC,EAAD,CAAoBL,MAAOA,EAAOvB,UAAWA,KAE7C,SAAC,EAAD,CAAiBC,SAAUA,EAAUD,UAAWA,KAElD,SAAC8B,EAAA,EAAD,CAAYpC,KAAK,UAAUD,KAAK,wBAIvC,C,4ECCD,IAXiB,SAAC,GAA4B,IAA1BsC,EAAyB,EAAzBA,SAClB,GAA2BC,EAAAA,EAAAA,IAAc,sBAAlCC,GAAP,eACA,OACE,SAAC,KAAD,CAAMf,EAAE,OAAOgB,EAAE,OAAOC,QAAQ,SAASC,MAAM,SAA/C,UACE,SAAC,KAAD,CAAMlB,EAAGe,EAAmB,MAAQ,QAASI,EAAG,EAAGC,GAAG,QAAtD,UACE,SAAC,KAAD,UAAWP,OAIlB,C,8CCjBD,IAJmB,SAAC,GAA4B,IAA1BA,EAAyB,EAAzBA,SACpB,OAAO,SAAC,KAAD,CAAQQ,GAAI,EAAZ,SAAgBR,GACxB,C,8CCWD,IAboB,SAAC,GAA+B,IAA7BlB,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAC5B,OACE,UAAC,KAAD,CAAQ0B,GAAI,EAAZ,WACE,SAAC,KAAD,CAAStB,EAAE,OAAOuB,UAAU,SAA5B,SACG5B,KAEH,SAAC,KAAD,CAAM4B,UAAU,SAAS7C,MAAM,WAA/B,SACGkB,MAIR,C","sources":["common/components/RouterLink/index.tsx","pages/auth-pages/VerifyEmail/components/VerifyEmailForm/index.tsx","pages/auth-pages/VerifyEmail/components/VerifyEmailSuccess/index.tsx","pages/auth-pages/VerifyEmail/index.tsx","pages/auth-pages/components/AuthCard/index.tsx","pages/auth-pages/components/AuthFooter/index.tsx","pages/auth-pages/components/AuthHeading/index.tsx"],"sourcesContent":["import { Link, LinkProps } from \"@chakra-ui/react\";\nimport { Link as ReactRouterLink } from \"react-router-dom\";\n\ninterface AppProps {\n  text: string;\n  link: string;\n  linkProps?: LinkProps;\n}\nconst RouterLink = ({ text, link, linkProps }: AppProps) => {\n  return (\n    <Link color=\"blue.600\" as={ReactRouterLink} to={link} {...linkProps}>\n      {text}\n    </Link>\n  );\n};\n\nexport default RouterLink;\n","import { Box, Button, VStack } from \"@chakra-ui/react\";\nimport FlaskField from \"common/components/FlaskField\";\nimport FlaskForm from \"../../../../../common/components/FlaskForm\";\nimport useAPIDataAlert from \"../../../../../common/hooks/useAPIDataAlert\";\nimport AuthHeading from \"../../../components/AuthHeading\";\n\nconst KEY = \"request_email_verification_form\";\n\ninterface AppProps {\n  setToggle: React.Dispatch<React.SetStateAction<boolean>>;\n  setEmail: React.Dispatch<React.SetStateAction<string>>;\n}\n\n/**\n * React component to request email verification\n */\nconst VerifyEmailForm = ({ setToggle, setEmail }: AppProps) => {\n  const { apiDataAlerter } = useAPIDataAlert();\n\n  // * Handles on form submit after data is sent\n  const handleSubmit = (data: any) => {\n    const resetSuccess = () => {\n      setToggle(true);\n      setEmail(data.success);\n    };\n    apiDataAlerter({\n      onSuccess: resetSuccess,\n      successMsg: `Email verification sent to ${data.success}`,\n      data: data,\n    });\n  };\n\n  return (\n    <FlaskForm formKey={KEY} runAfterSubmit={handleSubmit}>\n      {({ isSubmitting }) => (\n        <>\n          <AuthHeading\n            title=\"Verify your email\"\n            desc=\"You will recieve instructions for verifying your email.\"\n          />\n\n          <VStack spacing={5}>\n            {/* Email, CAPTCHA */}\n            <FlaskField property=\"email\" />\n            <Box w=\"100%\">\n              <FlaskField property=\"math\" />\n            </Box>\n\n            <Button\n              type=\"submit\"\n              colorScheme=\"blue\"\n              width=\"full\"\n              isDisabled={isSubmitting}\n            >\n              Request email verification link\n            </Button>\n          </VStack>\n        </>\n      )}\n    </FlaskForm>\n  );\n};\n\nexport default VerifyEmailForm;\n","import { Button } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport AuthFooter from \"../../../components/AuthFooter\";\nimport AuthHeading from \"../../../components/AuthHeading\";\n\ninterface AppProps {\n  email: string;\n  setToggle: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst VerifyEmailSuccess = ({ email, setToggle }: AppProps) => {\n  return (\n    <>\n      <AuthHeading\n        title=\"Success!\"\n        desc={`An email has been sent to ${email}. Please follow the link inside to verify your account before signing in. If you don't receive the email within 5 minutes, check your spam folder. Otherwise, request another email by clicking below.`}\n      />\n      <AuthFooter>\n        <Button\n          onClick={() => {\n            setToggle(false);\n          }}\n        >\n          Resend another verification email\n        </Button>\n      </AuthFooter>\n    </>\n  );\n};\n\nexport default VerifyEmailSuccess;\n","import { VStack } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\n\nimport RouterLink from \"../../../common/components/RouterLink\";\nimport usePageTitle from \"../../../common/hooks/usePageTitle\";\nimport AuthCard from \"../components/AuthCard\";\nimport VerifyEmailForm from \"./components/VerifyEmailForm\";\nimport VerifyEmailSuccess from \"./components/VerifyEmailSuccess\";\n\n/**\n * Send Verify Email Form\n */\nconst VerifyEmail = () => {\n  usePageTitle(\"Verify email\");\n  const [email, setEmail] = useState(\"\");\n  const [toggle, setToggle] = useState(false);\n\n  return (\n    <AuthCard>\n      <VStack spacing={3}>\n        {toggle ? (\n          <VerifyEmailSuccess email={email} setToggle={setToggle} />\n        ) : (\n          <VerifyEmailForm setEmail={setEmail} setToggle={setToggle} />\n        )}\n        <RouterLink link=\"/signin\" text=\"Back to sign in\" />\n      </VStack>\n    </AuthCard>\n  );\n};\n\nexport default VerifyEmail;\n","import {\n  Box,\n  Card,\n  CardBody,\n  Flex,\n  useMediaQuery,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { ReactNode } from \"react\";\n\ninterface AppProps {\n  children: ReactNode;\n}\n\n/**\n * AuthCard\n *\n * React component that wraps around auth elements, centering it and giving it a fixed width\n */\nconst AuthCard = ({ children }: AppProps) => {\n  const [isSmallerThan500] = useMediaQuery(\"(max-width: 500px)\");\n  return (\n    <Flex w=\"100%\" h=\"90vh\" justify=\"center\" align=\"center\">\n      <Card w={isSmallerThan500 ? \"90%\" : \"450px\"} p={5} bg=\"white\">\n        <CardBody>{children}</CardBody>\n      </Card>\n    </Flex>\n  );\n};\n\nexport default AuthCard;\n","import { VStack } from \"@chakra-ui/react\";\nimport { ReactNode } from \"react\";\n\ninterface AppProps {\n  children: ReactNode;\n}\n\nconst AuthFooter = ({ children }: AppProps) => {\n  return <VStack mt={5}>{children}</VStack>;\n};\n\nexport default AuthFooter;\n","import { Heading, Text, VStack } from \"@chakra-ui/react\";\n\ninterface AppProps {\n  title: string;\n  desc: string;\n}\n\nconst AuthHeading = ({ title, desc }: AppProps) => {\n  return (\n    <VStack mb={5}>\n      <Heading w=\"100%\" textAlign=\"center\">\n        {title}\n      </Heading>\n      <Text textAlign=\"center\" color=\"gray.600\">\n        {desc}\n      </Text>\n    </VStack>\n  );\n};\n\nexport default AuthHeading;\n"],"names":["text","link","linkProps","color","as","ReactRouterLink","to","setToggle","setEmail","apiDataAlerter","useAPIDataAlert","FlaskForm","formKey","runAfterSubmit","data","onSuccess","success","successMsg","isSubmitting","AuthHeading","title","desc","spacing","FlaskField","property","w","type","colorScheme","width","isDisabled","email","AuthFooter","onClick","usePageTitle","useState","toggle","AuthCard","RouterLink","children","useMediaQuery","isSmallerThan500","h","justify","align","p","bg","mt","mb","textAlign"],"sourceRoot":""}